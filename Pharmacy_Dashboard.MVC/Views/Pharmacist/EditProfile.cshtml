@model EditProfileViewModel

@{
    ViewData["Title"] = "Edit Profile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Include Leaflet CSS/JS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<div class="container mt-5">
    <div class="card shadow p-4">
        <h2 class="text-center mb-4">Edit Pharmacist Profile</h2>

        <!-- Profile Image -->
        <div class="d-flex justify-content-center mb-4">
            <div class="position-relative" style="width: 160px; height: 160px;">
                <img src="@(string.IsNullOrEmpty(Model.PictureUrl) ? Url.Content("https://images.pexels.com/photos/1704488/pexels-photo-1704488.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500") : Model.PictureUrl)"
                     class="rounded-circle border border-3 shadow border-primary w-100 h-100"
                     alt="Profile" id="profileImage" style="object-fit: cover;">

                <label for="uploadImage" class="position-absolute bottom-0 end-0 bg-primary text-white p-1 rounded-circle" style="cursor:pointer; width: 35px; height: 35px; display: flex; align-items: center; justify-content: center;">
                    <i class="bi bi-camera"></i>
                </label>

                <input type="file" id="uploadImage" name="ProfileImage" class="d-none" onchange="previewImage(this)">
            </div>
        </div>

        <!-- Form -->
        <form id="profileForm" asp-action="EditProfile" method="post">
            <div class="row mb-3">
                <div class="col-md-6">
                    <label asp-for="Email"></label>
                    <input asp-for="Email" class="form-control" readonly />
                </div>
                <div class="col-md-6">
                    <label asp-for="PharmacyName"></label>
                    <input asp-for="PharmacyName" class="form-control" required />
                    <span asp-validation-for="PharmacyName" class="text-danger"></span>
                </div>
            </div>

            <!-- Pharmacy Contacts -->
            <div class="mb-3">
                <label>Pharmacy Contact</label>
                <div id="contactContainer">
                    @for (int i = 0; i < (Model.PharmacyContacts?.Count ?? 1); i++)
                    {
                        <div class="input-group mb-2 contact-input">
                            <input type="hidden" asp-for="PharmacyContacts[@i].Id" value="@Model.PharmacyContacts[i].Id" />
                            <input type="text" asp-for="PharmacyContacts[@i].PhoneNumber" class="form-control" value="@Model.PharmacyContacts[i]?.PhoneNumber" />
                            @if (i > 0)
                            {
                                <button type="button" class="btn btn-outline-danger" onclick="removeContact(this)">
                                    <i class="bi bi-x-lg"></i>
                                </button>
                            }
                        </div>
                    }
                </div>
                <button type="button" class="btn btn-outline-success btn-sm" onclick="addContact()">
                    <i class="bi bi-plus-lg"></i> Add Contact
                </button>
            </div>

            <!-- Address and Map -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <label asp-for="Address"></label>
                    <input asp-for="Address" class="form-control" required />
                    <span asp-validation-for="Address" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label>Pharmacy Location</label>
                    <button type="button" class="btn btn-primary w-100 mb-2" onclick="getCurrentLocation()">Get Current Location</button>
                    <div class="d-flex justify-content-center">
                        <div id="map" style="height: 300px; width: 100%; max-width: 500px; border: 1px solid #ccc; border-radius: 10px;"></div>
                    </div>
                    <input type="hidden" name="Latitude" id="latitude" value="@Model.Latitude" />
                    <input type="hidden" name="Longitude" id="longitude" value="@Model.Longitude" />
                </div>
            </div>

            <div class="text-center">
                <button type="submit" class="btn btn-primary">Save Changes</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        // Profile Image Preview
        function previewImage(input) {
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    document.getElementById('profileImage').src = e.target.result;
                };
                reader.readAsDataURL(input.files[0]);
            }
        }

        // Contact Number Logic
        let contactCount = @Model.PharmacyContacts?.Count ?? 1;

        // Add new contact input field
        function addContact() {
            if (contactCount >= 3) return alert("Maximum 3 contact numbers allowed.");

            const container = document.getElementById("contactContainer");
            const div = document.createElement("div");
            div.className = "input-group mb-2 contact-input";
            div.innerHTML = `
                <input type="hidden" name="PharmacyContacts[${contactCount}].Id" value="0" />
                <input type="text" name="PharmacyContacts[${contactCount}].PhoneNumber" class="form-control" />
                <button type="button" class="btn btn-outline-danger" onclick="removeContact(this)">
                    <i class="bi bi-x-lg"></i>
                </button>
            `;
            container.appendChild(div);
            contactCount++;
        }

        // Remove a contact input field
        function removeContact(btn) {
            const inputGroup = btn.closest(".contact-input");
            if (document.querySelectorAll(".contact-input").length > 1) {
                inputGroup.remove();
                contactCount--;
            }
        }

        // Before submitting the form, ensure the dynamic contact numbers are included
        document.getElementById("profileForm").onsubmit = function (event) {
            const dynamicContacts = [];

            // Loop through dynamically added contact fields
            document.querySelectorAll(".contact-input").forEach(function (contactInput, index) {
                const phoneNumber = contactInput.querySelector("input[type='text']").value;
                const id = contactInput.querySelector("input[type='hidden']").value;

                // Add the contact data to the dynamicContacts array
                dynamicContacts.push({
                    PhoneNumber: phoneNumber,
                    Id: id
                });
            });

            // Manually update the form data with dynamic contacts
            const formData = new FormData(document.getElementById("profileForm"));
            dynamicContacts.forEach(function (contact, index) {
                formData.append(`PharmacyContacts[${index}].PhoneNumber`, contact.PhoneNumber);
                formData.append(`PharmacyContacts[${index}].Id`, contact.Id);
            });

            // Create a new request to submit form data (optional: use AJAX for async)
            const request = new XMLHttpRequest();
            request.open("POST", "EditProfile", true);

            // Send the updated form data including the dynamic contacts
            request.send(formData);

            // Prevent the default form submission
            event.preventDefault();
        };

        // Contact Number Logic
        // let contactCount = Model.PharmacyContacts?.Count ?? 1;

        // function addContact() {
        //     if (contactCount >= 3) return alert("Maximum 3 contact numbers allowed.");
        //     const container = document.getElementById("contactContainer");
        //     const div = document.createElement("div");
        //     div.className = "input-group mb-2 contact-input";
        //     div.innerHTML = `
        //             <input type="text" name="PharmacyContacts[${contactCount}].PhoneNumber" class="form-control" />
        //             <input type="hidden" name="PharmacyContacts[${contactCount}].Id" value="0" />
        //             <button type="button" class="btn btn-outline-danger" onclick="removeContact(this)">
        //                 <i class="bi bi-x-lg"></i>
        //             </button>
        //         `;
        //     container.appendChild(div);
        //     contactCount++;
        // }

        // function removeContact(btn) {
        //     const inputGroup = btn.closest(".contact-input");
        //     if (document.querySelectorAll(".contact-input").length > 1) {
        //         inputGroup.remove();
        //         contactCount--;
        //     }
        // }

        // Leaflet Map Logic
        const initialLat = @Model.Latitude ?? 30.0444;
        const initialLng = @Model.Longitude ?? 31.2357;
        let map = L.map('map').setView([initialLat, initialLng], 13);
        let marker = L.marker([initialLat, initialLng], { draggable: true }).addTo(map);

        marker.on('dragend', function () {
            const latLng = marker.getLatLng();
            document.getElementById("latitude").value = latLng.lat;
            document.getElementById("longitude").value = latLng.lng;
        });

        map.on('click', function (e) {
            const lat = e.latlng.lat;
            const lng = e.latlng.lng;
            marker.setLatLng([lat, lng]);
            document.getElementById("latitude").value = lat;
            document.getElementById("longitude").value = lng;
        });

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        function getCurrentLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    const lat = position.coords.latitude;
                    const lng = position.coords.longitude;
                    marker.setLatLng([lat, lng]);
                    map.setView([lat, lng], 14);
                    document.getElementById("latitude").value = lat;
                    document.getElementById("longitude").value = lng;
                }, function () {
                    alert("Unable to retrieve your location.");
                });
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        }
    </script>
}
