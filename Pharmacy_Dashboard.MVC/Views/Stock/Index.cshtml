@using Pharmacy_Dashboard.MVC.ViewModel.Stock
@model IReadOnlyList<PharmacyStockViewModel>

@{
    ViewData["Title"] = "Medicine Stock";
    Layout = "~/Views/Shared/_Layout.cshtml"; // adjust based on your layout
}
<style>
    .form-control:focus {
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        border-color: #86b7fe;
    }

    .btn-outline-primary:hover {
        background-color: #0d6efd;
        color: white;
    }

    .search-box {
        position: relative;
        width: 300px;
        height: 40px;
        background-color: #838383; /* The blue color */
        border-radius: 20px;
        padding: 5px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    /* Input Field */
    .search-txt {
        width: 80%;
        padding: 10px;
        border: none;
        outline: none;
        background-color: transparent; /* or a dark color like #333 */
        color: #ffffff;
        font-size: 16px;
        border-radius: 30px;
    }

    .header-container {
        padding: 25px 20px; /* Increased padding */
        margin: 0px 0px; /* Adjusted margin */
    }

    .secondary-container {
        padding: 10px 20px; /* Increased padding */
        margin: 0px 0px; /* Adjusted margin */
    }

    input:-webkit-autofill {
        box-shadow: 0 0 0px 1000px #0b0f26 inset !important;
        -webkit-box-shadow: 0 0 0px 1000px #0b0f26 inset !important;
        -webkit-text-fill-color: #fff !important;
        transition: background-color 5000s ease-in-out 0s !important;
    }
    /* Search Icon Button */
    .search-btn {
        width: 40px;
        height: 40px;
        background: none;
        border: none;
        color: #ffffff;
        font-size: 18px;
        display: flex;
        justify-content: center;
        align-items: center;
        text-decoration: none;
    }

        /* Font Awesome Icon */
        .search-btn i {
            color: rgb(252, 252, 252);
            cursor: pointer;
        }

    .search-txt::placeholder {
        color: #ccc; /* Change this color to whatever you want */
    }

    .mb-0 {
        color: #4142ff;
    }
    /* Clear (X) Button */
    .clear-btn {
        width: 40px;
        height: 40px;
        background: none;
        border: none;
        color: #ffffff; /* White color for the "X" */
        font-size: 18px;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
    }

    .search-box {
        overflow: hidden; /* Hides autofill glow */
        border-radius: 20px;
    }

    .search-txt:focus {
        border: none;
        outline: none;
        box-shadow: none;
    }

    /* Remove focus outline for the "X" button */
    .clear-btn:focus {
        outline: none;
    }

    .clear-btn i {
        color: #ffffff; /* FontAwesome icon color */
    }

    .pagination-container {
        padding: 20px 0;
        margin: 15px 0;
    }

    .pagination-circle .page-link {
        border-radius: 50% !important;
        margin: 0 5px;
        width: 40px;
        height: 40px;
        text-align: center;
        padding: 0.5rem 0;
        line-height: 1.5;
        font-weight: bold;
        color: #000;
        background-color: #eee;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .pagination-circle .page-item.active .page-link {
        background-color: #fff;
        border: 2px solid #000;
    }

    .pagination-circle .page-item.disabled .page-link {
        color: #ccc;
        pointer-events: none;
        background-color: #f9f9f9;
    }

    /* Fix for clickable area */
    .pagination-circle .page-item {
        position: relative;
    }

    .pagination-circle .page-link:hover {
        background-color: #ddd;
        transform: scale(1.05);
    }

    /* Ensure the entire button is clickable */
    .pagination-circle .page-link::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 1;
    }

    /* page size selector */
    /* Page Size Dropdown Styling */
    .page-size-dropdown-container {
        display: flex;
        align-items: center;
        gap: 12px;
        padding-left: 20px;
    }

        .page-size-dropdown-container label {
            font-size: 0.85rem;
            color: #6c757d;
            margin-bottom: 0;
            white-space: nowrap;
            font-weight: 500;
        }

    .custom-select-wrapper {
        position: relative;
        width: 80px;
    }

    .custom-select {
        appearance: none;
        -webkit-appearance: none;
        width: 100%;
        padding: 8px 30px 8px 12px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        background-color: white;
        font-size: 0.9rem;
        cursor: pointer;
        color: #495057;
        transition: all 0.2s ease;
    }

        .custom-select:focus {
            outline: none;
            border-color: #adb5bd;
            box-shadow: 0 0 0 0.15rem rgba(173, 181, 189, 0.25);
        }

    .select-arrow {
        position: absolute;
        top: 50%;
        right: 10px;
        transform: translateY(-50%);
        width: 0;
        height: 0;
        border-left: 5px solid transparent;
        border-right: 5px solid transparent;
        border-top: 6px solid #6c757d;
        pointer-events: none;
    }

    .custom-select:hover {
        border-color: #adb5bd;
    }

    /* Optional: Add some animation to the arrow on focus */
    .custom-select:focus + .select-arrow {
        transform: translateY(-50%) rotate(180deg);
        transition: transform 0.3s ease;
    }

    /* Optional: Add some animation to the arrow on focus */
    .custom-select:focus + .select-arrow {
        transform: translateY(-50%) rotate(180deg);
        transition: transform 0.3s ease;
    }

    /* Card styling enhancement */
    .card {
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .card-header {
        background-color: #fff;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

    /* Table enhancements */
    .table th {
        font-weight: 600;
        color: #495057;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 0, 0, 0.02);
    }

    /* Filter dropdown styling */
    .filter-dropdown-container {
        display: flex;
        align-items: center;
        gap: 12px;
        padding-left: 20px;
    }

        .filter-dropdown-container label {
            font-size: 0.85rem;
            color: #6c757d;
            margin-bottom: 0;
            white-space: nowrap;
            font-weight: 500;
        }

    .filter-select-wrapper {
        position: relative;
        width: 150px;
    }

    .filter-select {
        appearance: none;
        -webkit-appearance: none;
        width: 100%;
        padding: 8px 30px 8px 12px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        background-color: white;
        font-size: 0.9rem;
        cursor: pointer;
        color: #495057;
        transition: all 0.2s ease;
    }

        .filter-select:focus {
            outline: none;
            border-color: #adb5bd;
            box-shadow: 0 0 0 0.15rem rgba(173, 181, 189, 0.25);
        }

        .filter-select:hover {
            border-color: #adb5bd;
        }

    .filter-arrow {
        position: absolute;
        top: 50%;
        right: 10px;
        transform: translateY(-50%);
        width: 0;
        height: 0;
        border-left: 5px solid transparent;
        border-right: 5px solid transparent;
        border-top: 6px solid #6c757d;
        pointer-events: none;
    }

    .filter-select:focus + .filter-arrow {
        transform: translateY(-50%) rotate(180deg);
        transition: transform 0.3s ease;
    }

    /* Flex container for filters */
    .filters-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        flex-wrap: wrap;
        gap: 10px;
    }

    /* Active sort indicator */
    .sort-indicator {
        margin-left: 5px;
        font-size: 0.7rem;
    }
</style>

<div class="container-fluid mt-4">
    <div class="card shadow rounded-3">
        <div class="card-header header-container d-flex justify-content-between align-items-center flex-wrap gap-3">
            <h5 class="mb-0">Medicine Stock</h5>
            <div class="col-md-6">
                <form action="/Stock/Index" method="get" class="search-box" id="searchForm" style="background-color:#0b0f26">
                    <input type="text" autocomplete="off" class="search-txt" placeholder="Search by Medicine Name" id="StringFromRequest" name="Search"
                           value="@ViewData["CurrentFilter"]">

                    @if (!string.IsNullOrEmpty(ViewData["CurrentFilter"]?.ToString()))
                    {
                        <button type="button" class="clear-btn" onclick="clearSearch()">
                            <i class="fa fa-times"></i>
                        </button>
                    }

                    <button type="submit" class="search-btn">
                        <i class="fa fa-search"></i>
                    </button>
                </form>
            </div>
            <a href="@Url.Action("Add", "Stock")" class="btn btn-primary rounded-pill shadow-sm">
                <i class="bi bi-plus-circle me-1"></i> Add Stock
            </a>
        </div>

        @* page size selector & filters *@
        <div class="filters-container secondary-container">
            <!-- Sort/Filter dropdown -->
            <div class="filter-dropdown-container">
                <label for="sortSelect">Sort by:</label>
                <div class="filter-select-wrapper">
                    <select id="sortSelect" class="filter-select" onchange="applySorting()">
                        <option value="" selected="@(string.IsNullOrEmpty(ViewData["SortField"]?.ToString()))">Sort by...</option>
                        <option value="name_asc" selected="@(ViewData["SortField"]?.ToString() == "name_asc")">Name (A-Z)</option>
                        <option value="name_desc" selected="@(ViewData["SortField"]?.ToString() == "name_desc")">Name (Z-A)</option>
                        <option value="quantity_asc" selected="@(ViewData["SortField"]?.ToString() == "quantity_asc")">Quantity (Low-High)</option>
                        <option value="quantity_desc" selected="@(ViewData["SortField"]?.ToString() == "quantity_desc")">Quantity (High-Low)</option>
                        <option value="price_asc" selected="@(ViewData["SortField"]?.ToString() == "price_asc")">Price (Low-High)</option>
                        <option value="price_desc" selected="@(ViewData["SortField"]?.ToString() == "price_desc")">Price (High-Low)</option>
                    </select>
                    <div class="filter-arrow"></div>
                </div>
            </div>
            <div class="page-size-dropdown-container">
                <label for="pageSizeSelect">Rows per page:</label>
                <div class="custom-select-wrapper">
                    <select id="pageSizeSelect" class="custom-select" onchange="window.location.href=this.value">
                        <option value="?pageIndex=1&pageSize=5&Search=@ViewData["CurrentFilter"]&sort=@ViewData["SortField"]" selected="@(ViewData["CurrentPageSize"].ToString() == "5")">5</option>
                        <option value="?pageIndex=1&pageSize=10&Search=@ViewData["CurrentFilter"]&sort=@ViewData["SortField"]" selected="@(ViewData["CurrentPageSize"].ToString() == "10")">10</option>
                        <option value="?pageIndex=1&pageSize=15&Search=@ViewData["CurrentFilter"]&sort=@ViewData["SortField"]" selected="@(ViewData["CurrentPageSize"].ToString() == "15")">15</option>
                        <option value="?pageIndex=1&pageSize=20&Search=@ViewData["CurrentFilter"]&sort=@ViewData["SortField"]" selected="@(ViewData["CurrentPageSize"].ToString() == "20")">20</option>
                        <option value="?pageIndex=1&pageSize=25&Search=@ViewData["CurrentFilter"]&sort=@ViewData["SortField"]" selected="@(ViewData["CurrentPageSize"].ToString() == "25")">25</option>
                        <option value="?pageIndex=1&pageSize=30&Search=@ViewData["CurrentFilter"]&sort=@ViewData["SortField"]" selected="@(ViewData["CurrentPageSize"].ToString() == "30")">30</option>
                        <option value="?pageIndex=1&pageSize=35&Search=@ViewData["CurrentFilter"]&sort=@ViewData["SortField"]" selected="@(ViewData["CurrentPageSize"].ToString() == "35")">35</option>
                        <option value="?pageIndex=1&pageSize=40&Search=@ViewData["CurrentFilter"]&sort=@ViewData["SortField"]" selected="@(ViewData["CurrentPageSize"].ToString() == "40")">40</option>
                        <option value="?pageIndex=1&pageSize=45&Search=@ViewData["CurrentFilter"]&sort=@ViewData["SortField"]" selected="@(ViewData["CurrentPageSize"].ToString() == "45")">45</option>
                        <option value="?pageIndex=1&pageSize=50&Search=@ViewData["CurrentFilter"]&sort=@ViewData["SortField"]" selected="@(ViewData["CurrentPageSize"].ToString() == "50")">50</option>
                    </select>
                    <div class="select-arrow"></div>
                </div>
            </div>
        </div>

        <div class="card-body p-0">
            <table class="table table-striped table-hover mb-0">
@*                 <thead class="table-light">
                    <tr>
                        <th>Medicine Name</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Action</th>
                    </tr>
                </thead> *@
                <thead class="table-light">
                    <tr>
                        <th>
                            Medicine Name
                            @if (ViewData["SortField"]?.ToString() == "name_asc")
                            {
                                <span class="sort-indicator">▲</span>
                            }
                            else if (ViewData["SortField"]?.ToString() == "name_desc")
                            {
                                <span class="sort-indicator">▼</span>
                            }
                        </th>
                        <th>
                            Quantity
                            @if (ViewData["SortField"]?.ToString() == "quantity_asc")
                            {
                                <span class="sort-indicator">▲</span>
                            }
                            else if (ViewData["SortField"]?.ToString() == "quantity_desc")
                            {
                                <span class="sort-indicator">▼</span>
                            }
                        </th>
                        <th>
                            Price
                            @if (ViewData["SortField"]?.ToString() == "price_asc")
                            {
                                <span class="sort-indicator">▲</span>
                            }
                            else if (ViewData["SortField"]?.ToString() == "price_desc")
                            {
                                <span class="sort-indicator">▼</span>
                            }
                        </th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.MedicineName</td>
                                <td>@item.Quantity</td>
                                <td>@item.Price.ToString("C")</td>
                                <td>
                                    <a href="@Url.Action("Edit", "Stock", new { id = item.Id })"
                                       class="btn btn-sm btn-warning rounded-pill shadow-sm">
                                        <i class="bi bi-pencil-square"></i> Edit
                                    </a>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" class="text-center">No medicine records found.</td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- Pagination component -->
            <nav class="d-flex justify-content-center pagination-container">
                <ul class="pagination pagination-circle m-0">
                    <!-- First page button -->
                    <li class="page-item @(ViewBag.PageIndex > 1 ? "" : "disabled")">
                        <a class="page-link" href="?pageIndex=1&pageSize=@ViewData["CurrentPageSize"]&Search=@ViewData["CurrentFilter"]&sort=@ViewData["SortField"]">&laquo;&laquo;</a>
                    </li>
                    <!-- Previous page button -->
                    <li class="page-item @(ViewBag.HasPreviousPage ? "" : "disabled")">
                        <a class="page-link" href="?pageIndex=@(ViewBag.PageIndex - 1)&pageSize=@ViewData["CurrentPageSize"]&Search=@ViewData["CurrentFilter"]&sort=@ViewData["SortField"]">&laquo;</a>
                    </li>

                    @{
                        int startPage = Math.Max(1, ViewBag.PageIndex - 2);
                        int endPage = Math.Min(ViewBag.TotalPages, startPage + 4);

                        if (endPage - startPage < 4 && ViewBag.TotalPages > 4)
                        {
                            startPage = Math.Max(1, endPage - 4);
                        }
                    }

                    @for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i == ViewBag.PageIndex ? "active" : "")">
                            <a class="page-link" href="?pageIndex=@i&pageSize=@ViewData["CurrentPageSize"]&Search=@ViewData["CurrentFilter"]&sort=@ViewData["SortField"]">@i</a>
                        </li>
                    }

                    <!-- Next page button -->
                    <li class="page-item @(ViewBag.HasNextPage ? "" : "disabled")">
                        <a class="page-link" href="?pageIndex=@(ViewBag.PageIndex + 1)&pageSize=@ViewData["CurrentPageSize"]&Search=@ViewData["CurrentFilter"]&sort=@ViewData["SortField"]">&raquo;</a>
                    </li>
                    <!-- Last page button -->
                    <li class="page-item @(ViewBag.PageIndex < ViewBag.TotalPages ? "" : "disabled")">
                        <a class="page-link" href="?pageIndex=@ViewBag.TotalPages&pageSize=@ViewData["CurrentPageSize"]&Search=@ViewData["CurrentFilter"]&sort=@ViewData["SortField"]">&raquo;&raquo;</a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

<script>
    function clearSearch() {
        document.getElementById("StringFromRequest").value = '';
        document.getElementById("searchForm").submit();
    }

    function applySorting() {
        const sortValue = document.getElementById("sortSelect").value;
        const pageSize = "@ViewData["CurrentPageSize"]";
        const searchValue = "@ViewData["CurrentFilter"]";

        window.location.href = `?pageIndex=1&pageSize=${pageSize}&Search=${searchValue}&sort=${sortValue}`;
    }
</script>